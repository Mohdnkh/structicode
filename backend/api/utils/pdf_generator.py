from fpdf import FPDF
from datetime import datetime
import os

class PDFReport(FPDF):
    def header(self):
        self.set_font("Arial", size=14)
        self.set_text_color(0, 51, 102)
        self.cell(0, 10, "Structural Analysis Report", ln=True, align="C")
        self.set_font("Arial", size=9)
        self.set_text_color(100, 100, 100)
        self.cell(0, 10, "Generated by Civil Engineering Web Tool", ln=True, align="C")
        self.ln(3)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", size=8)
        self.set_text_color(120, 120, 120)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")

def sanitize(text):
    try:
        return str(text).encode("latin-1", "ignore").decode("latin-1")
    except:
        return str(text)

def generate_pdf(data: dict, result: dict, filename="analysis_report.pdf"):
    pdf = PDFReport()
    pdf.add_page()
    pdf.set_font("Arial", size=11)
    pdf.set_text_color(0, 0, 0)

    # ================================
    # 1. Project Info
    # ================================
    pdf.set_fill_color(220, 230, 250)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "1. Project Information", ln=True, fill=True)
    pdf.set_font("Arial", size=11)
    pdf.cell(0, 8, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True)
    pdf.cell(0, 8, f"Design Code: {sanitize(data.get('code', 'N/A'))}", ln=True)
    element_type = data.get('element') or data.get('data', {}).get('element', 'Structure')
    pdf.cell(0, 8, f"Analysis Type: {sanitize(element_type)}", ln=True)
    pdf.ln(4)

    # ================================
    # 2. Input Data
    # ================================
    pdf.set_fill_color(220, 245, 245)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "2. Input Data", ln=True, fill=True)
    pdf.set_font("Arial", size=10)

    if data.get("nodes"):
        pdf.cell(0, 8, "Nodes:", ln=True)
        for n in data["nodes"]:
            pdf.cell(0, 8, f" - {n['id']}: (x={n['x']}, y={n['y']}), support={n['support']}", ln=True)

    if data.get("members"):
        pdf.cell(0, 8, "Members:", ln=True)
        for m in data["members"]:
            pdf.cell(0, 8, f" - {m['id']}: {m['n1']} → {m['n2']}, Section={m['sectionId']}, Material={m['materialId']}", ln=True)

    if data.get("slabs"):
        pdf.cell(0, 8, "Slabs:", ln=True)
        for s in data["slabs"]:
            pdf.cell(0, 8, f" - {s['id']}: w={s['w']}m, h={s['h']}m, t={s['t']}m", ln=True)

    pdf.ln(4)

    # ================================
    # 3. Seismic Info
    # ================================
    seismic = result.get("result", {}).get("seismic")
    if seismic:
        pdf.set_fill_color(245, 220, 220)
        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, "3. Seismic Data", ln=True, fill=True)
        pdf.set_font("Arial", size=10)
        for k, v in seismic.items():
            pdf.cell(0, 8, sanitize(f"{k}: {v}"), ln=True)
        pdf.ln(4)

    # ================================
    # 4. Structural Analysis Results
    # ================================
    pdf.set_fill_color(220, 235, 220)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "4. Structural Analysis Results", ln=True, fill=True)
    pdf.set_font("Arial", size=10)

    combos = {}
    if "results" in result:
        combos = result["results"]
    elif "result" in result and "structural" in result["result"]:
        combos = {"structural": result["result"]["structural"]}
    else:
        combos = result

    for combo, res in combos.items():
        pdf.set_font("Arial", "B", 11)
        pdf.cell(0, 8, f"Load Combination: {combo}", ln=True)
        pdf.set_font("Arial", size=10)

        if res.get("displacements"):
            pdf.cell(0, 8, "Displacements:", ln=True)
            for nid, disp in res["displacements"].items():
                pdf.cell(0, 8, f" - Node {nid}: ux={disp['ux']:.4f}, uy={disp['uy']:.4f}, rz={disp['rz']:.4f}", ln=True)

        if res.get("member_forces"):
            pdf.cell(0, 8, "Member Forces:", ln=True)
            for mid, f in res["member_forces"].items():
                pdf.cell(0, 8, f" - {mid}: Nmax={f['Nmax']:.2f}, Vmax={f['Vmax']:.2f}, Mmax={f['Mmax']:.2f}", ln=True)

        if "design" in res:
            pdf.cell(0, 8, "Design Checks:", ln=True)
            for mid, d in res["design"].items():
                pdf.cell(0, 8, f" - Member {mid}: Overall: {'SAFE ✅' if d['Overall_OK'] else 'NOT SAFE ❌'}", ln=True)

        pdf.ln(3)

    # ================================
    # 5. Recommendations
    # ================================
    pdf.set_fill_color(255, 255, 204)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "5. Recommendations", ln=True, fill=True)
    pdf.set_font("Arial", size=10)
    pdf.multi_cell(0, 8, sanitize("• Verify detailing as per code.\n• Ensure minimum reinforcement rules.\n• Review seismic parameters.\n• Check deflection & crack limits."))

    output_dir = os.path.abspath("reports")
    os.makedirs(output_dir, exist_ok=True)
    full_path = os.path.join(output_dir, filename)
    pdf.output(full_path, "F")  # ✅ نكتب الملف فعلياً
    return full_path
