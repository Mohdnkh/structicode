from fpdf import FPDF
from datetime import datetime
import os
from pathlib import Path

class PDFReport(FPDF):
    def header(self):
        self.set_font("DejaVu", "", 16)
        self.set_text_color(0, 51, 102)
        self.cell(0, 10, "Structural Analysis Report", ln=True, align="C")
        self.set_font("DejaVu", "", 10)
        self.set_text_color(100, 100, 100)
        self.cell(0, 10, "Generated by Civil Engineering Web Tool", ln=True, align="C")
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("DejaVu", "", 8)
        self.set_text_color(150, 150, 150)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")

def generate_pdf(data: dict, result: dict, filename="analysis_report.pdf"):
    pdf = PDFReport()
    font_path = Path(__file__).resolve().parent / "DejaVuSans.ttf"
    pdf.add_font("DejaVu", "", str(font_path), uni=True)

    pdf.set_font("DejaVu", size=12)
    pdf.add_page()
    pdf.set_text_color(0, 0, 0)

    symbol_descriptions = {
        "As (mm²)": "Steel Area",
        "Mn (kN·m)": "Nominal Moment Capacity",
        "Mu (kN·m)": "Applied Moment",
        "fc (MPa)": "Concrete Strength",
        "fy (MPa)": "Steel Yield Strength",
        "Pn (kN)": "Axial Capacity",
        "Pu (kN)": "Applied Axial Load",
        "Ag (cm²)": "Gross Area",
        "phi": "Strength Reduction Factor",
        "As_required (mm²/m)": "Required Steel Area",
        "As_bottom_provided (mm²/m)": "Provided Bottom Steel",
        "As_top_provided (mm²/m)": "Provided Top Steel"
    }

    pdf.set_fill_color(230, 230, 250)
    pdf.set_font("DejaVu", "", 12)
    pdf.cell(0, 10, "1. Project Information", ln=True, fill=True)
    pdf.set_font("DejaVu", size=11)
    pdf.cell(0, 8, f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}", ln=True)
    pdf.cell(0, 8, f"Design Code: {data.get('code', 'N/A')}", ln=True)
    element_type = data.get('element') or data.get('data', {}).get('element')
    pdf.cell(0, 8, f"Element Type: {element_type or 'N/A'}", ln=True)
    pdf.ln(6)

    pdf.set_fill_color(220, 245, 245)
    pdf.set_font("DejaVu", "", 12)
    pdf.cell(0, 10, "2. Input Parameters", ln=True, fill=True)
    pdf.set_font("DejaVu", size=11)
    input_data = data.get("data") or data
    for key, value in input_data.items():
        if isinstance(value, dict):
            pdf.set_font("DejaVu", "", 11)
            pdf.cell(0, 8, f"{key.capitalize()}:", ln=True)
            pdf.set_font("DejaVu", size=11)
            for subkey, subval in value.items():
                desc = symbol_descriptions.get(subkey, "")
                line = f"   - {subkey}: {subval}"
                if desc:
                    line += f" → {desc}"
                pdf.cell(0, 8, line, ln=True)
        else:
            desc = symbol_descriptions.get(key, "")
            line = f"{key}: {value}"
            if desc:
                line += f" → {desc}"
            pdf.cell(0, 8, line, ln=True)
    pdf.ln(4)

    seismic = result.get("result", {}).get("seismic")
    if seismic:
        pdf.set_fill_color(245, 230, 230)
        pdf.set_font("DejaVu", "", 12)
        pdf.cell(0, 10, "3. Seismic Analysis", ln=True, fill=True)
        pdf.set_font("DejaVu", size=11)
        for key, value in seismic.items():
            pdf.cell(0, 8, f"{key}: {value}", ln=True)
        pdf.set_text_color(120, 120, 120)
        pdf.set_font("DejaVu", "", 10)
        pdf.multi_cell(0, 8, "Note: This is a preliminary seismic assessment based on zone, soil type, and system type. It is not a replacement for full dynamic analysis.")
        pdf.set_text_color(0, 0, 0)
        pdf.ln(4)

    structural = result.get("result", {}).get("structural", {})
    pdf.set_fill_color(220, 235, 220)
    pdf.set_font("DejaVu", "", 12)
    pdf.cell(0, 10, "4. Structural Analysis", ln=True, fill=True)
    pdf.set_font("DejaVu", size=11)
    for key, value in structural.items():
        if key in ["details", "recommendations"]:
            continue
        if isinstance(value, dict):
            pdf.cell(0, 8, f"{key.capitalize()}:", ln=True)
            for subkey, subval in value.items():
                desc = symbol_descriptions.get(subkey, "")
                line = f"   - {subkey}: {subval}"
                if desc:
                    line += f" → {desc}"
                pdf.cell(0, 8, line, ln=True)
        else:
            desc = symbol_descriptions.get(key, "")
            line = f"{key}: {value}"
            if desc:
                line += f" → {desc}"
            pdf.cell(0, 8, line, ln=True)

    if "details" in structural:
        pdf.set_font("DejaVu", "", 11)
        pdf.cell(0, 8, "Details:", ln=True)
        for key, val in structural["details"].items():
            pdf.multi_cell(0, 8, f"{key}: {val}")
        pdf.ln(2)

    if structural.get("recommendations"):
        pdf.set_fill_color(255, 255, 204)
        pdf.set_font("DejaVu", "", 11)
        pdf.cell(0, 8, "Recommendations:", ln=True, fill=True)
        for rec in structural["recommendations"]:
            pdf.set_text_color(80, 80, 80)
            pdf.multi_cell(0, 8, f"- {rec}")
        pdf.set_text_color(0, 0, 0)

    output_dir = os.path.abspath("reports")
    os.makedirs(output_dir, exist_ok=True)
    full_path = os.path.join(output_dir, filename)

    pdf.output(full_path)
    return full_path
